// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedules.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countOverlappingSchedules = `-- name: CountOverlappingSchedules :one
SELECT COUNT(*) FROM schedules
WHERE facility_id = $1
  AND day = $2
  AND begin_datetime < $3
  AND end_datetime > $4
`

type CountOverlappingSchedulesParams struct {
	FacilityID    uuid.UUID `json:"facility_id"`
	Day           int32     `json:"day"`
	BeginDatetime time.Time `json:"begin_datetime"`
	EndDatetime   time.Time `json:"end_datetime"`
}

func (q *Queries) CountOverlappingSchedules(ctx context.Context, arg CountOverlappingSchedulesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOverlappingSchedules,
		arg.FacilityID,
		arg.Day,
		arg.BeginDatetime,
		arg.EndDatetime,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (id, begin_datetime, end_datetime, course_id, facility_id)
VALUES (gen_random_uuid(), $1, $2, $3, $4)
    RETURNING id, begin_datetime, end_datetime, course_id, facility_id, created_at, updated_at, day
`

type CreateScheduleParams struct {
	BeginDatetime time.Time     `json:"begin_datetime"`
	EndDatetime   time.Time     `json:"end_datetime"`
	CourseID      uuid.NullUUID `json:"course_id"`
	FacilityID    uuid.UUID     `json:"facility_id"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.BeginDatetime,
		arg.EndDatetime,
		arg.CourseID,
		arg.FacilityID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BeginDatetime,
		&i.EndDatetime,
		&i.CourseID,
		&i.FacilityID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Day,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :execrows
DELETE FROM schedules WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSchedule, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSchedules = `-- name: GetAllSchedules :many
SELECT id, begin_datetime, end_datetime, course_id, facility_id, created_at, updated_at, day FROM schedules
`

func (q *Queries) GetAllSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.BeginDatetime,
			&i.EndDatetime,
			&i.CourseID,
			&i.FacilityID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Day,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleById = `-- name: GetScheduleById :one
SELECT id, begin_datetime, end_datetime, course_id, facility_id, created_at, updated_at, day FROM schedules WHERE id = $1
`

func (q *Queries) GetScheduleById(ctx context.Context, id int32) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleById, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BeginDatetime,
		&i.EndDatetime,
		&i.CourseID,
		&i.FacilityID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Day,
	)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :exec
UPDATE schedules
SET begin_datetime = $1, end_datetime = $2, course_id = $3, facility_id = $4, day = $5
WHERE id = $6
`

type UpdateScheduleParams struct {
	BeginDatetime time.Time     `json:"begin_datetime"`
	EndDatetime   time.Time     `json:"end_datetime"`
	CourseID      uuid.NullUUID `json:"course_id"`
	FacilityID    uuid.UUID     `json:"facility_id"`
	Day           int32         `json:"day"`
	ID            int32         `json:"id"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateSchedule,
		arg.BeginDatetime,
		arg.EndDatetime,
		arg.CourseID,
		arg.FacilityID,
		arg.Day,
		arg.ID,
	)
	return err
}
